/*
 * Automatically generated by jrpcgen 1.0.7 on 29.11.2012
 * jrpcgen is part of the "Remote Tea.Net" ONC/RPC package for C#
 * See http://remotetea.sourceforge.net for details
 */
namespace NFSLibrary.Protocols.V4.RPC.Callback{
using org.acplt.oncrpc;

public class CB_SEQUENCE4args : XdrAble {
    public sessionid4 csa_sessionid;
    public sequenceid4 csa_sequenceid;
    public slotid4 csa_slotid;
    public slotid4 csa_highest_slotid;
    public bool csa_cachethis;
    public referring_call_list4 [] csa_referring_call_lists;

    public CB_SEQUENCE4args() {
    }

    public CB_SEQUENCE4args(XdrDecodingStream xdr) {
        xdrDecode(xdr);
    }

    public void xdrEncode(XdrEncodingStream xdr) {
        csa_sequenceid.xdrEncode(xdr);
        csa_slotid.xdrEncode(xdr);
        csa_highest_slotid.xdrEncode(xdr);
        xdr.xdrEncodeBoolean(csa_cachethis);
        { int _size = csa_referring_call_lists.Length; xdr.xdrEncodeInt(_size); for ( int _idx = 0; _idx < _size; ++_idx ) { csa_referring_call_lists[_idx].xdrEncode(xdr); } }
    }

    public void xdrDecode(XdrDecodingStream xdr) {
        csa_sequenceid = new sequenceid4(xdr);
        csa_slotid = new slotid4(xdr);
        csa_highest_slotid = new slotid4(xdr);
        csa_cachethis = xdr.xdrDecodeBoolean();
        { int _size = xdr.xdrDecodeInt(); csa_referring_call_lists = new referring_call_list4[_size]; for ( int _idx = 0; _idx < _size; ++_idx ) { csa_referring_call_lists[_idx] = new referring_call_list4(xdr); } }
    }

}
} // End of CB_SEQUENCE4args.cs
